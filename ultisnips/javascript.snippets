# Variables

snippet var "assignment"
${1:name} = ${2:value};
endsnippet

snippet vart "this assignment"
this.${1:name} = ${2:value};
endsnippet

snippet let "variable initialization"
let ${1:name} = ${2:value};
endsnippet

snippet const "constant initialization"
const ${1:name} = ${2:value};
endsnippet

snippet new "new object initialization"
new ${2:class}(${3:params})
endsnippet

snippet pair "object pair"
${1:key}: ${2:pair}
endsnippet

# Import/Export

snippet imp "import statement"
import ${1:member} from '${2:module}';
endsnippet

snippet impb "import statement with curly braces"
import { ${1:member} } from '${2:module}';
endsnippet

snippet exp "export statement"
export ${1:var};
endsnippet

snippet expd "export default statement"
export default ${1:var};
endsnippet

snippet req "require statement"
const ${1:name} = require('${2:path}');
endsnippet

snippet mod "module exports"
module.exports = ${1:expression};
endsnippet

# Functions

snippet fun "standard function definition"
function ${1:name}(${2:params}) {
	$0
}
endsnippet

snippet func "class function definition"
${1:name}(${2:params}) {
	$0
}
endsnippet

snippet anon "single-line anonymous function definition" w
${1:(${2:params})} => $0
endsnippet

snippet anonm "multi-line anonymous function definition" w
${1:(${2:params})} => {
	$0
}
endsnippet

snippet call "function call"
${1:name}(${2:params});
endsnippet

snippet callr "function call with variable store"
${1:var} = ${2:name}(${3:params});
endsnippet

snippet ret "return statement"
return ${1:expression};
endsnippet

# Control Flow

snippet if "if statement"
if (${1:cond}) {
	$0
}
endsnippet

snippet ife "if else statement"
if (${1:cond}) {
	${2:if}
} else {
	${3:else}
}
endsnippet

snippet while "while statement"
while (${1:cond}) {
	$0
}
endsnippet

snippet for "for statement"
for (let ${1:i} = 0; $1 < ${2:end}; $1++) {
	$0
}
endsnippet

snippet switch "switch statement"
switch (${1:var}) {
	$0
}
endsnippet

snippet case "case statement"
case ${1:value}:
	$0
endsnippet

snippet === "equality check" w
${1:var1} === ${2:var2}
endsnippet

snippet and "and condition" w
${1:cond1} && ${2:cond2}
endsnippet

snippet or "or condition" w
${1:cond1} || ${2:cond2}
endsnippet


# Classes

snippet class "class definition"
class ${1:name} {
	$0
}
endsnippet

snippet ext "extends statement"
extends ${1:class}
endsnippet

snippet con "constructor definition"
constructor(${1:params}) {
	$0
}
endsnippet

# Logging

snippet clog "console log statement"
console.log(JSON.stringify(${1:expression}));
endsnippet

snippet clogv "console log variable"
console.log('$1: ' + JSON.stringify(${1:expression}));
endsnippet

snippet clogm "console log message"
console.log('${1:message}: ' + JSON.stringify(${2:expression}));
endsnippet

# Browser

snippet id "get element by id"
document.getElementById('${1:id}')
endsnippet

snippet query "query selector"
${1:document}.querySelector('${2:selector}')
endsnippet

snippet querya "query selector all"
${1:document}.querySelectorAll('${2:selector}')
endsnippet
