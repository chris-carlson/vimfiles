snippet class "class definition"
class ${1:name}:

	$0
endsnippet

snippet classe "extends class definition"
class ${1:name}(${2:extend}):

	$0
endsnippet

snippet __ "underscore function"
def __${1:name}__(self${2:, ${3:params}}):
	$0
endsnippet

snippet init "init function"
def __init__(self${1:, ${2:params}}):
	$0
endsnippet

snippet var "variable declaration"
${1:name} = ${2:value}
endsnippet

snippet vars "self variable declaration"
self._${1:name} = ${2:$1}
endsnippet

snippet varc "constructor variable declaration"
${1:name} = ${1/(?:\w+\.)*(?:([a-z0-9]+)_?)/\u$1/g}(${2:params})
endsnippet

snippet def "function definition"
def ${1:name}(${2:params}):
	$0
endsnippet

snippet defs "self function definition"
def ${1:name}(self${2:, ${3:params}}):
	$0
endsnippet

snippet defc "class function definition"
@classmethod
def ${1:name}(cls${2:, ${3:params}}):
	$0
endsnippet

snippet deft "static function definition"
@staticmethod
def ${1:name}(${2:params}):
	$0
endsnippet

snippet prop "property function"
@property
def ${1:var}(self):
	return self._$1
endsnippet

snippet set "setter function"
@${1:var}.setter
def $1(self, $1):
	self._$1 = $1
endsnippet

snippet imp "import statement"
from ${1:path} import ${1/(?:\w+\.)*(?:([a-z0-9]+)_?)/\u$1/g}
endsnippet

snippet if "if statement" i
if ${1:condition}:
endsnippet

snippet ife "else statement"
if ${1:condition}:
	${2:body}
else:
	${3:body}
endsnippet

snippet while "while loop"
while ${1:condition}:
endsnippet

snippet for "for loop"
for ${1:item} in ${2:collection}:
endsnippet

snippet range "range for loop"
for ${1:item} in range(${2:0}, ${3:len(${4:collection})}):
endsnippet

snippet raise "raise exception"
raise ${1:class}('${2:message}')
endsnippet

snippet print "print statement"
print(str(${1:expression}))
endsnippet

snippet printv "print variable"
print('$1: ' + str(${1:expression}))
endsnippet

snippet printm "print message and variable"
print('${1:message}: ' + str(${2:expression}))
endsnippet

snippet == "equality check"
${1:variable1} == ${2:variable2}
endsnippet

snippet and "and condition" w
${1:condition1} and ${2:condition2}
endsnippet

snippet or "or condition" w
${1:condition1} or ${2:condition2}
endsnippet

snippet block "block comment"
"""
endsnippet

snippet index "indexes of character"
${1:name}_index_1 = ${2:line}.find('${3:char}')
$1_index_2 = $2.find('$3', $1_index_1 + 1)
${4:name} = $2[$1_index_1 + 1 : $1_index_2]
endsnippet
