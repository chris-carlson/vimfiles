# Classes

snippet class "class definition"
class ${1:name}:
endsnippet

snippet classe "extends class definition"
class ${1:name}(${2:extend}):
endsnippet

# Functions

snippet __ "underscore function"
def __${1:name}__(self${2:, ${3:params}}) -> ${4:type}:
endsnippet

snippet init "init function"
def __init__(self${1:, ${2:params}}) -> None:
endsnippet

snippet def "function definition"
def ${1:name}(${2:params}) -> ${3:type}:
endsnippet

snippet defs "self function definition"
def ${1:name}(self${2:, ${3:params}}) -> ${4:type}:
endsnippet

snippet defc "class function definition"
@classmethod
def ${1:name}(cls${2:, ${3:params}}) -> ${4:type}:
endsnippet

snippet deft "static function definition"
@staticmethod
def ${1:name}(${2:params}) -> ${3:type}:
endsnippet

snippet prop "property function"
@property
def ${1:variable}(self) -> ${2:type}:
	return self._$1
endsnippet

snippet setter "setter function"
@${1:variable}.setter
def $1(self, $1) -> None:
	self._$1 = $1
endsnippet

snippet par "parameter" w
${1:variable}: ${2:type}
endsnippet

snippet ret "return statement"
return ${1:expression}
endsnippet

snippet exit "system exit"
sys.exit()
endsnippet

snippet join "join statement" w
'${1:sep}'.join(${2:list})
endsnippet

snippet sort "sort list"
${1:list}.sort(key=lambda ${2:item}: ${3:expression})
endsnippet

# Variables

snippet vari "variable initialization"
${1:name}: ${2:type} = ${3:value}
endsnippet

snippet vara "variable assignment"
${1:name} = ${2:value}
endsnippet

snippet varc "constructor variable initialization"
${1:name}: ${2:type} = $2(${3:params})
endsnippet

snippet varsi "self variable initialization"
self._${1:name}: ${2:type} = ${3:value}
endsnippet

snippet varsp "self variable initialization from parameter"
self._${1:name}: ${2:type} = $1
endsnippet

snippet varsa "self variable assignment"
self._${1:name} = ${2:value}
endsnippet

snippet varsc "self constructor variable initialization"
self._${1:name}: ${2:type} = $2(${3:params})
endsnippet

snippet listi "list variable"
${1:name}: List[${2:type}] = ${3:[]}
endsnippet

snippet lista "list creation" w
[${1:expression} for ${2:item} in ${3:collection}]
endsnippet

snippet listac "conditional list creation" w
[${1:expression} for ${2:item} in ${3:collection} if ${4:condition}]
endsnippet

snippet dicti "dict variable"
${1:name}: Dict[${2:type1}, ${3:type2}] = ${4:{}}
endsnippet

snippet dicta "dict creation" w
{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:collection}.items()}
endsnippet

snippet dictac "conditional dict creation" w
{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:collection}.items() if ${6:condition}}
endsnippet

snippet seti "set variable"
${1:name}: Set[${2:type}] = ${3:set()}
endsnippet

snippet type "type variable"
${1:type} = TypeVar('$1')
endsnippet

snippet ter "ternary expression"
${1:expression1} if ${2:condition} else ${3:expression2}
endsnippet

snippet raw "raw string" w
r'${1:string}'
endsnippet

snippet nt "named tuple"
${1:name} = namedtuple('$1', [${2:fields}])
endsnippet

snippet sv "self variable" w
self._${1:name}
endsnippet

snippet sf "self function"
self._${1:name}(${2:params})
endsnippet

# Import

snippet imp "import statement"
from ${1:path} import ${1/(?:\w+\.)*(?:([a-z0-9]+)_?)/\u$1/g}
endsnippet

snippet impt "import typing"
from typing import ${1:name}
endsnippet

snippet impc "import cac module"
from cac.${1:path} import ${1/(?:\w+\.)*(?:([a-z0-9]+)_?)/\u$1/g}
endsnippet

snippet impnt "import named tuple"
from collections import namedtuple
endsnippet

# Control Flow

snippet if "if statement" i
if ${1:cond}:
endsnippet

snippet ife "if else statement"
if ${1:cond}:
	${2:body}
else:
	${3:body}
endsnippet

snippet while "while loop"
while ${1:cond}:
endsnippet

snippet for "for loop"
for ${1:item} in ${2:collection}:
endsnippet

snippet ford "dict for loop"
for ${1:key}, ${2:value} in ${3:dict}.items():
endsnippet

snippet range "range for loop"
for ${1:index} in range(${2:0}, ${3:len(${4:collection})}):
endsnippet

snippet raise "raise exception"
raise ${1:ValueError}('${2:message}')
endsnippet

snippet de "equality check"
${1:variable1} == ${2:variable2}
endsnippet

snippet ne "negative equality check"
${1:variable1} != ${2:variable2}
endsnippet

snippet and "and condition" w
${1:cond1} and ${2:cond2}
endsnippet

snippet or "or condition" w
${1:cond1} or ${2:cond2}
endsnippet

snippet isn "positive none check"
${1:variable} is None
endsnippet

snippet isnn "negative none check"
${1:variable} is not None
endsnippet

snippet lene "length equality check" w
len(${1:variable}) == ${2:0}
endsnippet

snippet lenne "length non-equality check" w
len(${1:variable}) != ${2:0}
endsnippet

snippet leng "length greater than check" w
len(${1:variable}) > ${2:0}
endsnippet

snippet in "in condition"
${1:variable} in ${2:collection}
endsnippet

# Logging

snippet pr "print statement"
print(${1:expression})
endsnippet

snippet prs "print statement to string"
print(str(${1:expression}))
endsnippet

snippet prl "print statement for length"
print(str(len(${1:expression})))
endsnippet

snippet prt "print statement for type"
print(str(type(${1:expression})))
endsnippet

snippet prv "print variable"
print('$1: ' + str(${1:expression}))
endsnippet

snippet prm "print message and variable"
print('${1:message}: ' + str(${2:expression}))
endsnippet

snippet prp "print key and value pair"
print(str(${1:key}) + ': ' + str(${2:value}))
endsnippet

# Comments

snippet bc "block comment"
"""
endsnippet
