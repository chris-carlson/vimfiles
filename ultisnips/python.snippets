# Classes

snippet class "class definition"
class ${1:name}:
endsnippet

snippet classe "extends class definition"
class ${1:name}(${2:extend}):
endsnippet

# Functions

snippet __ "underscore function"
def __${1:name}__(self${2:, ${3:params}}) -> ${4:type}:
endsnippet

snippet init "init function"
def __init__(self${1:, ${2:params}}) -> None:
endsnippet

snippet def "function definition"
def ${1:name}(${2:params}) -> ${3:type}:
endsnippet

snippet defs "self function definition"
def ${1:name}(self${2:, ${3:params}}) -> ${4:type}:
endsnippet

snippet defc "class function definition"
@classmethod
def ${1:name}(cls${2:, ${3:params}}) -> ${4:type}:
endsnippet

snippet deft "static function definition"
@staticmethod
def ${1:name}(${2:params}) -> ${3:type}:
endsnippet

snippet prop "property function"
@property
def ${1:var}(self) -> ${2:type}:
	return self._$1
endsnippet

snippet set "setter function"
@${1:var}.setter
def $1(self, $1) -> None:
	self._$1 = $1
endsnippet

snippet par "parameter" w
${1:var}: ${2:type}
endsnippet

snippet ret "return statement"
return ${1:expression}
endsnippet

snippet exit "system exit"
sys.exit()
endsnippet

snippet join "join statement" w
'${1:sep}'.join(${2:list})
endsnippet

# Variables

snippet vari "variable initialization"
${1:name}: ${2:type} = ${3:value}
endsnippet

snippet vara "variable assignment"
${1:name} = ${2:value}
endsnippet

snippet varc "constructor variable initialization"
${1:name}: ${2:type} = $2(${3:params})
endsnippet

snippet varsi "self variable initialization"
self._${1:name}: ${2:type} = ${3:value}
endsnippet

snippet varsp "self variable initialization from parameter"
self._${1:name}: ${2:type} = $1
endsnippet

snippet varsa "self variable assignment"
self._${1:name} = ${2:value}
endsnippet

snippet varsc "self constructor variable initialization"
self._${1:name}: ${2:type} = $2(${3:params})
endsnippet

snippet list "list creation" w
[${1:expression} for ${2:item} in ${3:collection}]
endsnippet

snippet listc "conditional list creation" w
[${1:expression} for ${2:item} in ${3:collection} if ${4:condition}]
endsnippet

snippet dict "dict creation" w
[${1:key}: ${2:value} for ${3:item} in ${4:collection}]
endsnippet

snippet dictc "conditional dict creation" w
[${1:key}: ${2:value} for ${3:item} in ${4:collection} if ${5:condition}]
endsnippet

snippet type "type variable"
${1:type} = TypeVar('$1')
endsnippet

# Import

snippet imp "import statement"
from ${1:path} import ${1/(?:\w+\.)*(?:([a-z0-9]+)_?)/\u$1/g}
endsnippet

snippet impt "import typing"
from typing import ${1:name}
endsnippet

snippet impc "import cac module"
from cac.${1:path} import ${1/(?:\w+\.)*(?:([a-z0-9]+)_?)/\u$1/g}
endsnippet

# Control Flow

snippet if "if statement" i
if ${1:cond}:
endsnippet

snippet ife "if else statement"
if ${1:cond}:
	${2:body}
else:
	${3:body}
endsnippet

snippet while "while loop"
while ${1:cond}:
endsnippet

snippet for "for loop"
for ${1:item} in ${2:collection}:
endsnippet

snippet ford "dict for loop"
for ${1:key}, ${2:value} in ${3:dict}.items():
endsnippet

snippet range "range for loop"
for ${1:index} in range(${2:0}, ${3:len(${4:collection})}):
endsnippet

snippet raise "raise exception"
raise ${1:ValueError}('${2:message}')
endsnippet

snippet eq "equality check"
${1:var1} == ${2:var2}
endsnippet

snippet ne "negative equality check"
${1:var1} != ${2:var2}
endsnippet

snippet and "and condition" w
${1:cond1} and ${2:cond2}
endsnippet

snippet or "or condition" w
${1:cond1} or ${2:cond2}
endsnippet

snippet nop "positive none check"
${1:var} is None
endsnippet

snippet non "negative none check"
${1:var} is not None
endsnippet

snippet lene "length equality check" w
len(${1:var}) == ${2:0}
endsnippet

snippet leng "length greater than check" w
len(${1:var}) > ${2:0}
endsnippet

# Logging

snippet print "print statement"
print(str(${1:expression}))
endsnippet

snippet printv "print variable"
print('$1: ' + str(${1:expression}))
endsnippet

snippet printm "print message and variable"
print('${1:message}: ' + str(${2:expression}))
endsnippet

# Comments

snippet bc "block comment"
"""
endsnippet
